version: "3.8"

x-logging: &loki-logging
  driver: json-file
  options:
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

services:
  minio:
    image: minio/minio
    entrypoint: [""]
    command:
      [
        "sh",
        "-c",
        "mkdir -p /data/mimir-blocks /data/mimir-ruler /data/mimir-alertmanager && minio server --quiet /data",
      ]
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - minio-data:/data
    networks:
      - net

  grafana:
    image: grafana/grafana:latest
    pull_policy: always
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      # - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      # - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      # - GF_LOG_FILTERS=rendering:debug
      # - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
      # - GF_INSTALL_PLUGINS=marcusolsson-json-datasource
      # - GF_INSTALL_PLUGINS=volkovlabs-image-panel
      # - GF_INSTALL_PLUGINS=volkovlabs-echarts-panel

    volumes:
      - ./config/grafana/grafana-provisioning-dashboards.yaml:/etc/grafana/provisioning/dashboards/provisioning-dashboards.yaml:ro
      - ./config/grafana/grafana-provisioning-datasources.yaml:/etc/grafana/provisioning/datasources/provisioning-datasources.yaml:ro
      # Explicitly list the dashboards we want to show in the demo. We intentionally exclude dashboards that require
      # Kubernetes metrics (eg. resources or networking) and other services not available in the demo (eg. Grafana Loki).
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-alertmanager.json:/var/lib/grafana/dashboards/mimir-alertmanager.json:ro
      # - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-compactor.json:/var/lib/grafana/dashboards/mimir-compactor.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-object-store.json:/var/lib/grafana/dashboards/mimir-object-store.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-overrides.json:/var/lib/grafana/dashboards/mimir-overrides.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-queries.json:/var/lib/grafana/dashboards/mimir-queries.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-reads.json:/var/lib/grafana/dashboards/mimir-reads.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-ruler.json:/var/lib/grafana/dashboards/mimir-ruler.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-tenants.json:/var/lib/grafana/dashboards/mimir-tenants.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-top-tenants.json:/var/lib/grafana/dashboards/mimir-top-tenants.json:ro
      - ./components/mimir/mimir-mixin-compiled/dashboards/mimir-writes.json:/var/lib/grafana/dashboards/mimir-writes.json:ro
    ports:
      - 9000:3000
    networks:
      - net
  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=error
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.enable-remote-write-receiver
      - --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - "9090:9090"
    volumes:
      - ./config/mimir/prometheus.yaml:/etc/prometheus/prometheus.yml
      # - ./components/mimir/mimir-mixin-compiled/rules.yaml:/etc/prometheus/rules.yaml
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    networks:
      - net

  load-balancer:
    image: nginx:latest
    volumes:
      - ./config/mimir/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - net
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    ports:
      - 9009:9009

  mimir-1:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-1
    depends_on:
      - minio
    volumes:
      - ./config/mimir/mimir.yaml:/etc/mimir.yaml
      - ./config/grafana/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-1-data:/data
    networks:
      - net

  mimir-2:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-2
    depends_on:
      - minio
    volumes:
      - ./config/mimir/mimir.yaml:/etc/mimir.yaml
      - ./config/grafana/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-2-data:/data
    networks:
      - net

  mimir-3:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-3
    depends_on:
      - minio
    volumes:
      - ./config/mimir/mimir.yaml:/etc/mimir.yaml
      - ./config/grafana/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-3-data:/data
    networks:
      - net

  loki:
    image: grafana/loki:latest
    user: root
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki:/loki
      - ./config/loki/loki-config.yaml:/mnt/config/loki-config.yaml
      - loki-wal-data:/tmp/ruler-wal
      - ./config/loki/rules/:/tmp/rules/fake/
    command:
      - -config.file=/mnt/config/loki-config.yaml
    networks:
      - net
    logging: *loki-logging

  promtail:
    image: grafana/promtail:2.6.1
    volumes:
      - ./config/loki/promtail-config.yaml:/mnt/config/promtail-config.yaml
      - /var/lib/docker/containers:/host/containers
    command: -config.file /mnt/config/promtail-config.yaml
    networks:
      - net
    logging: *loki-logging

  vector:
    image: timberio/vector:0.24.2-debian
    volumes:
      - ./config/vector/:/etc/vector/
    ports:
      - "8686:8686"
      - "5050:5050" # promethues remote write endpoint
      # - "4317:4317" # OTLP gRPC receiver
      # - "4318:4318" # OTLP http receiver
    networks:
      - net
  mimirtool:
    image: grafana/mimirtool:latest
    entrypoint: ["tail", "-f", "/dev/null"]
    volumes:
      - ./config/mimirtool/output:/tmp/mimirtool/
    networks:
      - net

  demo-app:
    image: ealen/echo-server
    ports:
      - "3001:80"
    networks:
      - net
    logging: *loki-logging

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "5555:5555" # OTLP gRPC receiver
      - "6666:6666" # OTLP http receiver
      - "6060:6060" # promethues exporter
    networks:
      - net
  
  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo/tempo-config.yaml:/etc/tempo.yaml
      - ./config/tempo/tempo-overrides.yaml:/etc/overrides.yaml
      - ./config/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200"
      - "4317:4317"
    networks:
      - net
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3200/status || exit 1

volumes:
  mimir-1-data:
  mimir-2-data:
  mimir-3-data:
  minio-data:
  loki-wal-data:

networks:
  net:
  
